{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMIMSCKrBcU4Gj6+tRdOBH9"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["pip install scikit-learn\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R-eqTX78PjAi","executionInfo":{"status":"ok","timestamp":1716527010227,"user_tz":-360,"elapsed":23466,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"}},"outputId":"60bcb469-289d-4658-f2ca-39bb9ee57d8b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.2.2)\n","Requirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.25.2)\n","Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.11.4)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n"]}]},{"cell_type":"code","source":["import seaborn as sns"],"metadata":{"id":"1oi1eT9KPkYt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","# URL of the Titanic dataset\n","url = \"https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv\"\n","\n","# Reading the dataset into a pandas DataFrame\n","df = pd.read_csv(url)\n","\n","# Display the first few rows of the dataframe\n","print(df.head())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VZ3tgXLzPkbX","executionInfo":{"status":"ok","timestamp":1716737459386,"user_tz":-360,"elapsed":903,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"}},"outputId":"0c8c429a-c54c-4806-9ad5-792418fa0796"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["   PassengerId  Survived  Pclass  \\\n","0            1         0       3   \n","1            2         1       1   \n","2            3         1       3   \n","3            4         1       1   \n","4            5         0       3   \n","\n","                                                Name     Sex   Age  SibSp  \\\n","0                            Braund, Mr. Owen Harris    male  22.0      1   \n","1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n","2                             Heikkinen, Miss. Laina  female  26.0      0   \n","3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n","4                           Allen, Mr. William Henry    male  35.0      0   \n","\n","   Parch            Ticket     Fare Cabin Embarked  \n","0      0         A/5 21171   7.2500   NaN        S  \n","1      0          PC 17599  71.2833   C85        C  \n","2      0  STON/O2. 3101282   7.9250   NaN        S  \n","3      0            113803  53.1000  C123        S  \n","4      0            373450   8.0500   NaN        S  \n"]}]},{"cell_type":"code","source":["df.drop(columns=['Name','Ticket', 'Cabin'], inplace=True)\n","\n","print(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7ADew-saPkgL","executionInfo":{"status":"ok","timestamp":1716737461854,"user_tz":-360,"elapsed":2,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"}},"outputId":"06d28d6a-9aa2-41f6-f62a-90f1d8f32cdc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["     PassengerId  Survived  Pclass     Sex   Age  SibSp  Parch     Fare  \\\n","0              1         0       3    male  22.0      1      0   7.2500   \n","1              2         1       1  female  38.0      1      0  71.2833   \n","2              3         1       3  female  26.0      0      0   7.9250   \n","3              4         1       1  female  35.0      1      0  53.1000   \n","4              5         0       3    male  35.0      0      0   8.0500   \n","..           ...       ...     ...     ...   ...    ...    ...      ...   \n","886          887         0       2    male  27.0      0      0  13.0000   \n","887          888         1       1  female  19.0      0      0  30.0000   \n","888          889         0       3  female   NaN      1      2  23.4500   \n","889          890         1       1    male  26.0      0      0  30.0000   \n","890          891         0       3    male  32.0      0      0   7.7500   \n","\n","    Embarked  \n","0          S  \n","1          C  \n","2          S  \n","3          S  \n","4          S  \n","..       ...  \n","886        S  \n","887        S  \n","888        S  \n","889        C  \n","890        Q  \n","\n","[891 rows x 9 columns]\n"]}]},{"cell_type":"code","source":["# Convert 'sex' & 'embarked' column to numeric values using map\n","df['Sex'] = df['Sex'].map({'male': 0, 'female': 1})\n","df['Embarked'] = df['Embarked'].map({'C': 0, 'S': 1,'Q': 2 })\n","print(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pXwCnhegPqUO","executionInfo":{"status":"ok","timestamp":1716737462427,"user_tz":-360,"elapsed":3,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"}},"outputId":"a9c0a74c-7169-4b1a-9113-f30735d63f45"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["     PassengerId  Survived  Pclass  Sex   Age  SibSp  Parch     Fare  Embarked\n","0              1         0       3    0  22.0      1      0   7.2500       1.0\n","1              2         1       1    1  38.0      1      0  71.2833       0.0\n","2              3         1       3    1  26.0      0      0   7.9250       1.0\n","3              4         1       1    1  35.0      1      0  53.1000       1.0\n","4              5         0       3    0  35.0      0      0   8.0500       1.0\n","..           ...       ...     ...  ...   ...    ...    ...      ...       ...\n","886          887         0       2    0  27.0      0      0  13.0000       1.0\n","887          888         1       1    1  19.0      0      0  30.0000       1.0\n","888          889         0       3    1   NaN      1      2  23.4500       1.0\n","889          890         1       1    0  26.0      0      0  30.0000       0.0\n","890          891         0       3    0  32.0      0      0   7.7500       2.0\n","\n","[891 rows x 9 columns]\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.impute import SimpleImputer\n","from sklearn.model_selection import KFold, cross_val_score\n","from sklearn.metrics import accuracy_score\n","\n","# Select features and target\n","features = ['PassengerId', 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']\n","X = df[features]\n","y = df['Survived']\n","\n","\n","# Handle missing values\n","imputer = SimpleImputer(strategy='median')\n","X = imputer.fit_transform(X)\n","\n","k_fold = KFold(n_splits=5, shuffle=True, random_state=42)\n","clf = DecisionTreeClassifier()\n","\n","\n","\n","for train_indices, test_indices in k_fold.split(X):\n","    X_train, X_test = X[train_indices], X[test_indices]\n","    y_train, y_test = y[train_indices], y[test_indices]\n","\n","    clf.fit(X_train, y_train)\n","    y_pred = clf.predict(X_test)\n","\n","    accuracy = accuracy_score(y_test, y_pred)\n","    print(\"Accuracy:\", accuracy)\n","\n","    average_accuracy = 0\n","for train_indices, test_indices in k_fold.split(X):\n","    X_train, X_test = X[train_indices], X[test_indices]\n","    y_train, y_test = y[train_indices], y[test_indices]\n","\n","    clf.fit(X_train, y_train)\n","    y_pred = clf.predict(X_test)\n","\n","    accuracy = accuracy_score(y_test, y_pred)\n","    average_accuracy += accuracy\n","\n","average_accuracy /= k_fold.n_splits\n","print(f\"Average Accuracy: {average_accuracy:.2f}\")\n","\n","from sklearn.metrics import precision_score, recall_score, f1_score\n","\n","# Initialize lists to store precision, recall, and F1 score for each fold\n","precision_scores = []\n","recall_scores = []\n","f1_scores = []\n","\n","for train_indices, test_indices in k_fold.split(X):\n","    X_train, X_test = X[train_indices], X[test_indices]\n","    y_train, y_test = y[train_indices], y[test_indices]\n","\n","    clf.fit(X_train, y_train)\n","    y_pred = clf.predict(X_test)\n","\n","    # Calculate precision, recall, and F1 score for the current fold\n","    precision = precision_score(y_test, y_pred, average='macro')\n","    recall = recall_score(y_test, y_pred, average='macro')\n","    f1 = f1_score(y_test, y_pred, average='macro')\n","\n","    precision_scores.append(precision)\n","    recall_scores.append(recall)\n","    f1_scores.append(f1)\n","\n","# Compute average precision, recall, and F1 score across all folds\n","average_precision = sum(precision_scores) / len(precision_scores)\n","average_recall = sum(recall_scores) / len(recall_scores)\n","average_f1 = sum(f1_scores) / len(f1_scores)\n","\n","print(f\"Average Precision: {average_precision:.2f}\")\n","print(f\"Average Recall: {average_recall:.2f}\")\n","print(f\"Average F1 Score: {average_f1:.2f}\")\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vtAnkg3YPqW2","executionInfo":{"status":"ok","timestamp":1716737559780,"user_tz":-360,"elapsed":515,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"}},"outputId":"9d5bd50e-0d4b-4c17-ac08-49d8cb50484a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.770949720670391\n","Accuracy: 0.7303370786516854\n","Accuracy: 0.7808988764044944\n","Accuracy: 0.7359550561797753\n","Accuracy: 0.7191011235955056\n","Average Accuracy: 0.74\n","Average Precision: 0.72\n","Average Recall: 0.72\n","Average F1 Score: 0.72\n"]}]},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestClassifier\n","\n","k_fold = KFold(n_splits=5, shuffle=True, random_state=42)\n","clf = RandomForestClassifier()\n","\n","for train_indices, test_indices in k_fold.split(X):\n","    X_train, X_test = X[train_indices], X[test_indices]\n","    y_train, y_test = y[train_indices], y[test_indices]\n","\n","    clf.fit(X_train, y_train)\n","    y_pred = clf.predict(X_test)\n","\n","    accuracy = accuracy_score(y_test, y_pred)\n","    print(\"Accuracy:\", accuracy)\n","\n","    average_accuracy = 0\n","for train_indices, test_indices in k_fold.split(X):\n","    X_train, X_test = X[train_indices], X[test_indices]\n","    y_train, y_test = y[train_indices], y[test_indices]\n","\n","    clf.fit(X_train, y_train)\n","    y_pred = clf.predict(X_test)\n","\n","    accuracy = accuracy_score(y_test, y_pred)\n","    average_accuracy += accuracy\n","\n","average_accuracy /= k_fold.n_splits\n","print(f\"Average Accuracy: {average_accuracy:.2f}\")\n","\n","from sklearn.metrics import precision_score, recall_score, f1_score\n","\n","# Initialize lists to store precision, recall, and F1 score for each fold\n","precision_scores = []\n","recall_scores = []\n","f1_scores = []\n","\n","for train_indices, test_indices in k_fold.split(X):\n","    X_train, X_test = X[train_indices], X[test_indices]\n","    y_train, y_test = y[train_indices], y[test_indices]\n","\n","    clf.fit(X_train, y_train)\n","    y_pred = clf.predict(X_test)\n","\n","    # Calculate precision, recall, and F1 score for the current fold\n","    precision = precision_score(y_test, y_pred, average='macro')\n","    recall = recall_score(y_test, y_pred, average='macro')\n","    f1 = f1_score(y_test, y_pred, average='macro')\n","\n","    precision_scores.append(precision)\n","    recall_scores.append(recall)\n","    f1_scores.append(f1)\n","\n","# Compute average precision, recall, and F1 score across all folds\n","average_precision = sum(precision_scores) / len(precision_scores)\n","average_recall = sum(recall_scores) / len(recall_scores)\n","average_f1 = sum(f1_scores) / len(f1_scores)\n","\n","print(f\"Average Precision: {average_precision:.2f}\")\n","print(f\"Average Recall: {average_recall:.2f}\")\n","print(f\"Average F1 Score: {average_f1:.2f}\")\n","\n","\n"],"metadata":{"id":"Vdi9pRM4gQjB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716737468272,"user_tz":-360,"elapsed":3047,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"}},"outputId":"1c70be73-cc80-49d2-ff9c-850211740694"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.8212290502793296\n","Accuracy: 0.8426966292134831\n","Accuracy: 0.8651685393258427\n","Accuracy: 0.7921348314606742\n","Accuracy: 0.8258426966292135\n","Average Accuracy: 0.83\n","Average Precision: 0.82\n","Average Recall: 0.80\n","Average F1 Score: 0.81\n"]}]},{"cell_type":"code","source":["from sklearn.svm import SVC\n","\n","k_fold = KFold(n_splits=5, shuffle=True, random_state=42)\n","clf = SVC()\n","\n","for train_indices, test_indices in k_fold.split(X):\n","    X_train, X_test = X[train_indices], X[test_indices]\n","    y_train, y_test = y[train_indices], y[test_indices]\n","\n","    clf.fit(X_train, y_train)\n","    y_pred = clf.predict(X_test)\n","\n","    accuracy = accuracy_score(y_test, y_pred)\n","    print(\"Accuracy:\", accuracy)\n","\n","    average_accuracy = 0\n","for train_indices, test_indices in k_fold.split(X):\n","    X_train, X_test = X[train_indices], X[test_indices]\n","    y_train, y_test = y[train_indices], y[test_indices]\n","\n","    clf.fit(X_train, y_train)\n","    y_pred = clf.predict(X_test)\n","\n","    accuracy = accuracy_score(y_test, y_pred)\n","    average_accuracy += accuracy\n","\n","average_accuracy /= k_fold.n_splits\n","print(f\"Average Accuracy: {average_accuracy:.2f}\")\n","\n","from sklearn.metrics import precision_score, recall_score, f1_score\n","\n","# Initialize lists to store precision, recall, and F1 score for each fold\n","precision_scores = []\n","recall_scores = []\n","f1_scores = []\n","\n","for train_indices, test_indices in k_fold.split(X):\n","    X_train, X_test = X[train_indices], X[test_indices]\n","    y_train, y_test = y[train_indices], y[test_indices]\n","\n","    clf.fit(X_train, y_train)\n","    y_pred = clf.predict(X_test)\n","\n","    # Calculate precision, recall, and F1 score for the current fold\n","    precision = precision_score(y_test, y_pred, average='macro')\n","    recall = recall_score(y_test, y_pred, average='macro')\n","    f1 = f1_score(y_test, y_pred, average='macro')\n","\n","    precision_scores.append(precision)\n","    recall_scores.append(recall)\n","    f1_scores.append(f1)\n","\n","# Compute average precision, recall, and F1 score across all folds\n","average_precision = sum(precision_scores) / len(precision_scores)\n","average_recall = sum(recall_scores) / len(recall_scores)\n","average_f1 = sum(f1_scores) / len(f1_scores)\n","\n","print(f\"Average Precision: {average_precision:.2f}\")\n","print(f\"Average Recall: {average_recall:.2f}\")\n","print(f\"Average F1 Score: {average_f1:.2f}\")\n","\n","\n"],"metadata":{"id":"3QwG2CpsgQnv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716737468272,"user_tz":-360,"elapsed":3,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"}},"outputId":"63ae192a-cace-4e45-b50a-9f73167105eb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.5977653631284916\n","Accuracy: 0.6741573033707865\n","Accuracy: 0.6460674157303371\n","Accuracy: 0.6629213483146067\n","Accuracy: 0.6629213483146067\n","Average Accuracy: 0.65\n","Average Precision: 0.69\n","Average Recall: 0.55\n","Average F1 Score: 0.50\n"]}]},{"cell_type":"code","source":["\n","from sklearn.neighbors import KNeighborsClassifier\n","\n","k_fold = KFold(n_splits=5, shuffle=True, random_state=42)\n","clf = KNeighborsClassifier()\n","\n","for train_indices, test_indices in k_fold.split(X):\n","    X_train, X_test = X[train_indices], X[test_indices]\n","    y_train, y_test = y[train_indices], y[test_indices]\n","\n","    clf.fit(X_train, y_train)\n","    y_pred = clf.predict(X_test)\n","\n","    accuracy = accuracy_score(y_test, y_pred)\n","    print(\"Accuracy:\", accuracy)\n","\n","    average_accuracy = 0\n","for train_indices, test_indices in k_fold.split(X):\n","    X_train, X_test = X[train_indices], X[test_indices]\n","    y_train, y_test = y[train_indices], y[test_indices]\n","\n","    clf.fit(X_train, y_train)\n","    y_pred = clf.predict(X_test)\n","\n","    accuracy = accuracy_score(y_test, y_pred)\n","    average_accuracy += accuracy\n","\n","average_accuracy /= k_fold.n_splits\n","print(f\"Average Accuracy: {average_accuracy:.2f}\")\n","\n","from sklearn.metrics import precision_score, recall_score, f1_score\n","\n","# Initialize lists to store precision, recall, and F1 score for each fold\n","precision_scores = []\n","recall_scores = []\n","f1_scores = []\n","\n","for train_indices, test_indices in k_fold.split(X):\n","    X_train, X_test = X[train_indices], X[test_indices]\n","    y_train, y_test = y[train_indices], y[test_indices]\n","\n","    clf.fit(X_train, y_train)\n","    y_pred = clf.predict(X_test)\n","\n","    # Calculate precision, recall, and F1 score for the current fold\n","    precision = precision_score(y_test, y_pred, average='macro')\n","    recall = recall_score(y_test, y_pred, average='macro')\n","    f1 = f1_score(y_test, y_pred, average='macro')\n","\n","    precision_scores.append(precision)\n","    recall_scores.append(recall)\n","    f1_scores.append(f1)\n","\n","# Compute average precision, recall, and F1 score across all folds\n","average_precision = sum(precision_scores) / len(precision_scores)\n","average_recall = sum(recall_scores) / len(recall_scores)\n","average_f1 = sum(f1_scores) / len(f1_scores)\n","\n","print(f\"Average Precision: {average_precision:.2f}\")\n","print(f\"Average Recall: {average_recall:.2f}\")\n","print(f\"Average F1 Score: {average_f1:.2f}\")\n","\n","\n"],"metadata":{"id":"UUqJZa6sgQqf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716737488251,"user_tz":-360,"elapsed":2,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"}},"outputId":"18310f13-624b-4e2b-8c4b-fb435bd4c098"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.659217877094972\n","Accuracy: 0.6235955056179775\n","Accuracy: 0.6797752808988764\n","Accuracy: 0.6179775280898876\n","Accuracy: 0.6067415730337079\n","Average Accuracy: 0.64\n","Average Precision: 0.61\n","Average Recall: 0.59\n","Average F1 Score: 0.60\n"]}]},{"cell_type":"code","source":["from sklearn.linear_model import LogisticRegression\n","\n","k_fold = KFold(n_splits=5, shuffle=True, random_state=42)\n","clf = LogisticRegression(max_iter=2000)\n","\n","for train_indices, test_indices in k_fold.split(X):\n","    X_train, X_test = X[train_indices], X[test_indices]\n","    y_train, y_test = y[train_indices], y[test_indices]\n","\n","    clf.fit(X_train, y_train)\n","    y_pred = clf.predict(X_test)\n","\n","    accuracy = accuracy_score(y_test, y_pred)\n","    print(\"Accuracy:\", accuracy)\n","\n","    average_accuracy = 0\n","for train_indices, test_indices in k_fold.split(X):\n","    X_train, X_test = X[train_indices], X[test_indices]\n","    y_train, y_test = y[train_indices], y[test_indices]\n","\n","    clf.fit(X_train, y_train)\n","    y_pred = clf.predict(X_test)\n","\n","    accuracy = accuracy_score(y_test, y_pred)\n","    average_accuracy += accuracy\n","\n","average_accuracy /= k_fold.n_splits\n","print(f\"Average Accuracy: {average_accuracy:.2f}\")\n","\n","from sklearn.metrics import precision_score, recall_score, f1_score\n","\n","# Initialize lists to store precision, recall, and F1 score for each fold\n","precision_scores = []\n","recall_scores = []\n","f1_scores = []\n","\n","for train_indices, test_indices in k_fold.split(X):\n","    X_train, X_test = X[train_indices], X[test_indices]\n","    y_train, y_test = y[train_indices], y[test_indices]\n","\n","    clf.fit(X_train, y_train)\n","    y_pred = clf.predict(X_test)\n","\n","    # Calculate precision, recall, and F1 score for the current fold\n","    precision = precision_score(y_test, y_pred, average='macro')\n","    recall = recall_score(y_test, y_pred, average='macro')\n","    f1 = f1_score(y_test, y_pred, average='macro')\n","\n","    precision_scores.append(precision)\n","    recall_scores.append(recall)\n","    f1_scores.append(f1)\n","\n","# Compute average precision, recall, and F1 score across all folds\n","average_precision = sum(precision_scores) / len(precision_scores)\n","average_recall = sum(recall_scores) / len(recall_scores)\n","average_f1 = sum(f1_scores) / len(f1_scores)\n","\n","print(f\"Average Precision: {average_precision:.2f}\")\n","print(f\"Average Recall: {average_recall:.2f}\")\n","print(f\"Average F1 Score: {average_f1:.2f}\")\n","\n","\n"],"metadata":{"id":"UAdG7MZDgQtC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716737495109,"user_tz":-360,"elapsed":1583,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"}},"outputId":"15671c47-03fe-4ad8-9f06-12a1761242c7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.8100558659217877\n","Accuracy: 0.7808988764044944\n","Accuracy: 0.8314606741573034\n","Accuracy: 0.7696629213483146\n","Accuracy: 0.7752808988764045\n","Average Accuracy: 0.79\n","Average Precision: 0.78\n","Average Recall: 0.78\n","Average F1 Score: 0.78\n"]}]},{"cell_type":"code","source":["from sklearn.naive_bayes import GaussianNB\n","\n","k_fold = KFold(n_splits=5, shuffle=True, random_state=42)\n","clf = GaussianNB()\n","\n","for train_indices, test_indices in k_fold.split(X):\n","    X_train, X_test = X[train_indices], X[test_indices]\n","    y_train, y_test = y[train_indices], y[test_indices]\n","\n","    clf.fit(X_train, y_train)\n","    y_pred = clf.predict(X_test)\n","\n","    accuracy = accuracy_score(y_test, y_pred)\n","    print(\"Accuracy:\", accuracy)\n","\n","    average_accuracy = 0\n","for train_indices, test_indices in k_fold.split(X):\n","    X_train, X_test = X[train_indices], X[test_indices]\n","    y_train, y_test = y[train_indices], y[test_indices]\n","\n","    clf.fit(X_train, y_train)\n","    y_pred = clf.predict(X_test)\n","\n","    accuracy = accuracy_score(y_test, y_pred)\n","    average_accuracy += accuracy\n","\n","average_accuracy /= k_fold.n_splits\n","print(f\"Average Accuracy: {average_accuracy:.2f}\")\n","\n","from sklearn.metrics import precision_score, recall_score, f1_score\n","\n","# Initialize lists to store precision, recall, and F1 score for each fold\n","precision_scores = []\n","recall_scores = []\n","f1_scores = []\n","\n","for train_indices, test_indices in k_fold.split(X):\n","    X_train, X_test = X[train_indices], X[test_indices]\n","    y_train, y_test = y[train_indices], y[test_indices]\n","\n","    clf.fit(X_train, y_train)\n","    y_pred = clf.predict(X_test)\n","\n","    # Calculate precision, recall, and F1 score for the current fold\n","    precision = precision_score(y_test, y_pred, average='macro')\n","    recall = recall_score(y_test, y_pred, average='macro')\n","    f1 = f1_score(y_test, y_pred, average='macro')\n","\n","    precision_scores.append(precision)\n","    recall_scores.append(recall)\n","    f1_scores.append(f1)\n","\n","# Compute average precision, recall, and F1 score across all folds\n","average_precision = sum(precision_scores) / len(precision_scores)\n","average_recall = sum(recall_scores) / len(recall_scores)\n","average_f1 = sum(f1_scores) / len(f1_scores)\n","\n","print(f\"Average Precision: {average_precision:.2f}\")\n","print(f\"Average Recall: {average_recall:.2f}\")\n","print(f\"Average F1 Score: {average_f1:.2f}\")\n","\n","\n"],"metadata":{"id":"qZfSI4rBgQvu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716737498503,"user_tz":-360,"elapsed":528,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"}},"outputId":"3896f106-0631-4140-d650-48fa9ac0193d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.7821229050279329\n","Accuracy: 0.8089887640449438\n","Accuracy: 0.8258426966292135\n","Accuracy: 0.7528089887640449\n","Accuracy: 0.7752808988764045\n","Average Accuracy: 0.79\n","Average Precision: 0.78\n","Average Recall: 0.78\n","Average F1 Score: 0.78\n"]}]},{"cell_type":"code","source":["from sklearn.ensemble import HistGradientBoostingClassifier\n","\n","k_fold = KFold(n_splits=5, shuffle=True, random_state=42)\n","clf = HistGradientBoostingClassifier()\n","\n","\n","\n","for train_indices, test_indices in k_fold.split(X):\n","    X_train, X_test = X[train_indices], X[test_indices]\n","    y_train, y_test = y[train_indices], y[test_indices]\n","\n","    clf.fit(X_train, y_train)\n","    y_pred = clf.predict(X_test)\n","\n","    accuracy = accuracy_score(y_test, y_pred)\n","    print(\"Accuracy:\", accuracy)\n","\n","    average_accuracy = 0\n","for train_indices, test_indices in k_fold.split(X):\n","    X_train, X_test = X[train_indices], X[test_indices]\n","    y_train, y_test = y[train_indices], y[test_indices]\n","\n","    clf.fit(X_train, y_train)\n","    y_pred = clf.predict(X_test)\n","\n","    accuracy = accuracy_score(y_test, y_pred)\n","    average_accuracy += accuracy\n","\n","average_accuracy /= k_fold.n_splits\n","print(f\"Average Accuracy: {average_accuracy:.2f}\")\n","\n","from sklearn.metrics import precision_score, recall_score, f1_score\n","\n","# Initialize lists to store precision, recall, and F1 score for each fold\n","precision_scores = []\n","recall_scores = []\n","f1_scores = []\n","\n","for train_indices, test_indices in k_fold.split(X):\n","    X_train, X_test = X[train_indices], X[test_indices]\n","    y_train, y_test = y[train_indices], y[test_indices]\n","\n","    clf.fit(X_train, y_train)\n","    y_pred = clf.predict(X_test)\n","\n","    # Calculate precision, recall, and F1 score for the current fold\n","    precision = precision_score(y_test, y_pred, average='macro')\n","    recall = recall_score(y_test, y_pred, average='macro')\n","    f1 = f1_score(y_test, y_pred, average='macro')\n","\n","    precision_scores.append(precision)\n","    recall_scores.append(recall)\n","    f1_scores.append(f1)\n","\n","# Compute average precision, recall, and F1 score across all folds\n","average_precision = sum(precision_scores) / len(precision_scores)\n","average_recall = sum(recall_scores) / len(recall_scores)\n","average_f1 = sum(f1_scores) / len(f1_scores)\n","\n","print(f\"Average Precision: {average_precision:.2f}\")\n","print(f\"Average Recall: {average_recall:.2f}\")\n","print(f\"Average F1 Score: {average_f1:.2f}\")\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f6B0YPPWljUd","executionInfo":{"status":"ok","timestamp":1716737511084,"user_tz":-360,"elapsed":6739,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"}},"outputId":"bba11bbc-92c8-4a52-b4bd-3b2af7af4031"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.8212290502793296\n","Accuracy: 0.7921348314606742\n","Accuracy: 0.848314606741573\n","Accuracy: 0.7752808988764045\n","Accuracy: 0.8370786516853933\n","Average Accuracy: 0.81\n","Average Precision: 0.81\n","Average Recall: 0.79\n","Average F1 Score: 0.80\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"jkf0Zgwh0TI3"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**K-fold validation on pairwise deletion**"],"metadata":{"id":"8iIGH8R70XTg"}},{"cell_type":"code","source":["# Compute correlation matrix using pairwise deletion\n","df3 = df.corr(method='pearson', min_periods=1)\n","print(\"\\nPairwise Deletion Correlation Matrix:\")\n","print(df3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cuejd6vpljeg","executionInfo":{"status":"ok","timestamp":1716491403337,"user_tz":-360,"elapsed":1386,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"}},"outputId":"b324e4d1-58f4-43f0-c0e0-c38a6f90649a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Pairwise Deletion Correlation Matrix:\n","             PassengerId  Survived    Pclass       Sex       Age     SibSp  \\\n","PassengerId     1.000000 -0.005007 -0.035144 -0.042939  0.036847 -0.057527   \n","Survived       -0.005007  1.000000 -0.338481  0.543351 -0.077221 -0.035322   \n","Pclass         -0.035144 -0.338481  1.000000 -0.131900 -0.369226  0.083081   \n","Sex            -0.042939  0.543351 -0.131900  1.000000 -0.093254  0.114631   \n","Age             0.036847 -0.077221 -0.369226 -0.093254  1.000000 -0.308247   \n","SibSp          -0.057527 -0.035322  0.083081  0.114631 -0.308247  1.000000   \n","Parch          -0.001652  0.081629  0.018443  0.245489 -0.189119  0.414838   \n","Fare            0.012658  0.257307 -0.549500  0.182333  0.096067  0.159651   \n","Embarked       -0.017487 -0.126753  0.307324 -0.023175 -0.042340  0.031095   \n","\n","                Parch      Fare  Embarked  \n","PassengerId -0.001652  0.012658 -0.017487  \n","Survived     0.081629  0.257307 -0.126753  \n","Pclass       0.018443 -0.549500  0.307324  \n","Sex          0.245489  0.182333 -0.023175  \n","Age         -0.189119  0.096067 -0.042340  \n","SibSp        0.414838  0.159651  0.031095  \n","Parch        1.000000  0.216225 -0.035756  \n","Fare         0.216225  1.000000 -0.269588  \n","Embarked    -0.035756 -0.269588  1.000000  \n"]}]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import KFold\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n","\n","# Select features and target\n","features = ['PassengerId', 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']\n","X = df3[features]\n","y = df3['Survived']\n","y = [int(label) for label in y]\n","k_fold = KFold(n_splits=5, shuffle=True, random_state=42)\n","clf = KNeighborsClassifier()\n","\n","# Initialize average accuracy\n","average_accuracy = 0\n","\n","# Perform K-Fold cross-validation\n","for train_indices, test_indices in k_fold.split(X):\n","    X_train, X_test = X.iloc[train_indices], X.iloc[test_indices]\n","    y_train, y_test = [y[i] for i in train_indices], [y[i] for i in test_indices]  # Access elements of y using indexing\n","\n","    clf.fit(X_train, y_train)\n","    y_pred = clf.predict(X_test)\n","\n","    accuracy = accuracy_score(y_test, y_pred)\n","    print(\"Accuracy:\", accuracy)\n","\n","    average_accuracy += accuracy\n","\n","average_accuracy /= k_fold.n_splits\n","print(f\"Average Accuracy: {average_accuracy:.2f}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9c_b3WgCljhW","executionInfo":{"status":"ok","timestamp":1716491408279,"user_tz":-360,"elapsed":1005,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"}},"outputId":"bbc2aae7-66cf-405d-a9bc-b6d8ea2b8210"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.5\n","Accuracy: 1.0\n","Accuracy: 1.0\n","Accuracy: 1.0\n","Accuracy: 1.0\n","Average Accuracy: 0.90\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import KFold\n","from sklearn.svm import SVC\n","from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n","\n","# Select features and target\n","features = ['PassengerId', 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']\n","X = df3[features]\n","y = df3['Survived']\n","y = [int(label) for label in y]\n","k_fold = KFold(n_splits=5, shuffle=True, random_state=42)\n","clf = SVC()\n","\n","# Initialize average accuracy\n","average_accuracy = 0\n","\n","# Perform K-Fold cross-validation\n","for train_indices, test_indices in k_fold.split(X):\n","    X_train, X_test = X.iloc[train_indices], X.iloc[test_indices]\n","    y_train, y_test = [y[i] for i in train_indices], [y[i] for i in test_indices]\n","\n","    clf.fit(X_train, y_train)\n","    y_pred = clf.predict(X_test)\n","\n","    accuracy = accuracy_score(y_test, y_pred)\n","    print(\"Accuracy:\", accuracy)\n","\n","    average_accuracy += accuracy\n","\n","average_accuracy /= k_fold.n_splits\n","print(f\"Average Accuracy: {average_accuracy:.2f}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N2RpOooA10Y-","executionInfo":{"status":"ok","timestamp":1716491511857,"user_tz":-360,"elapsed":552,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"}},"outputId":"e7136e37-7ed4-4a6e-8390-c49acba54883"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.5\n","Accuracy: 1.0\n","Accuracy: 1.0\n","Accuracy: 1.0\n","Accuracy: 1.0\n","Average Accuracy: 0.90\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"MIiT2i7mj7r2"},"execution_count":null,"outputs":[]}]}