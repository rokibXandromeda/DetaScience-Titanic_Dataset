{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":12366,"status":"ok","timestamp":1716652504822,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"},"user_tz":-360},"id":"YRtNoESNysJL","outputId":"bbc52511-a1bb-432d-e0aa-9ebde860364d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.2.2)\n","Requirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.25.2)\n","Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.11.4)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n"]}],"source":["pip install scikit-learn"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U8tum1U_9Zq-"},"outputs":[],"source":["import seaborn as sns"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1716652506931,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"},"user_tz":-360},"id":"hdgizEqvzIg4","outputId":"0f0eefff-6810-434c-dd8d-96b1f039acf1"},"outputs":[{"output_type":"stream","name":"stdout","text":["   PassengerId  Survived  Pclass  \\\n","0            1         0       3   \n","1            2         1       1   \n","2            3         1       3   \n","3            4         1       1   \n","4            5         0       3   \n","\n","                                                Name     Sex   Age  SibSp  \\\n","0                            Braund, Mr. Owen Harris    male  22.0      1   \n","1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n","2                             Heikkinen, Miss. Laina  female  26.0      0   \n","3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n","4                           Allen, Mr. William Henry    male  35.0      0   \n","\n","   Parch            Ticket     Fare Cabin Embarked  \n","0      0         A/5 21171   7.2500   NaN        S  \n","1      0          PC 17599  71.2833   C85        C  \n","2      0  STON/O2. 3101282   7.9250   NaN        S  \n","3      0            113803  53.1000  C123        S  \n","4      0            373450   8.0500   NaN        S  \n"]}],"source":["import pandas as pd\n","\n","# URL of the Titanic dataset\n","url = \"https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv\"\n","\n","# Reading the dataset into a pandas DataFrame\n","df = pd.read_csv(url)\n","\n","# Display the first few rows of the dataframe\n","print(df.head())\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":517},"executionInfo":{"elapsed":639,"status":"ok","timestamp":1716652507565,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"},"user_tz":-360},"id":"IjZTKDxmyYTS","outputId":"e60875c1-9a06-49e8-d61b-22f5a8f74c8d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":4},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["import seaborn as sns\n","sns.heatmap(df.isnull(), yticklabels = False, cbar = False, cmap = 'viridis')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1716652507565,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"},"user_tz":-360},"id":"q_pHuk3MCgZy","outputId":"042a959b-f3df-4200-b76d-c805a8472a86"},"outputs":[{"output_type":"stream","name":"stdout","text":["PassengerId\n","Survived\n","Pclass\n","Name\n","Sex\n","Age\n","SibSp\n","Parch\n","Ticket\n","Fare\n","Cabin\n","Embarked\n"]}],"source":["for col in df.columns:\n","    print(col)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1716652507565,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"},"user_tz":-360},"id":"z5YoHZwE_2Fd","outputId":"7dc16c78-00ac-4cd5-b70d-95fc062e49eb"},"outputs":[{"output_type":"stream","name":"stdout","text":["     PassengerId  Survived  Pclass     Sex   Age  SibSp  Parch     Fare  \\\n","0              1         0       3    male  22.0      1      0   7.2500   \n","1              2         1       1  female  38.0      1      0  71.2833   \n","2              3         1       3  female  26.0      0      0   7.9250   \n","3              4         1       1  female  35.0      1      0  53.1000   \n","4              5         0       3    male  35.0      0      0   8.0500   \n","..           ...       ...     ...     ...   ...    ...    ...      ...   \n","886          887         0       2    male  27.0      0      0  13.0000   \n","887          888         1       1  female  19.0      0      0  30.0000   \n","888          889         0       3  female   NaN      1      2  23.4500   \n","889          890         1       1    male  26.0      0      0  30.0000   \n","890          891         0       3    male  32.0      0      0   7.7500   \n","\n","    Embarked  \n","0          S  \n","1          C  \n","2          S  \n","3          S  \n","4          S  \n","..       ...  \n","886        S  \n","887        S  \n","888        S  \n","889        C  \n","890        Q  \n","\n","[891 rows x 9 columns]\n"]}],"source":["df.drop(columns=['Name','Ticket', 'Cabin'], inplace=True)\n","\n","print(df)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1716652507566,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"},"user_tz":-360},"id":"ddOqp73mx1CG","outputId":"676ae5e0-e2cb-4e74-e701-e5a77ae4edf9"},"outputs":[{"output_type":"stream","name":"stdout","text":["     PassengerId  Survived  Pclass  Sex   Age  SibSp  Parch     Fare  Embarked\n","0              1         0       3    0  22.0      1      0   7.2500       1.0\n","1              2         1       1    1  38.0      1      0  71.2833       0.0\n","2              3         1       3    1  26.0      0      0   7.9250       1.0\n","3              4         1       1    1  35.0      1      0  53.1000       1.0\n","4              5         0       3    0  35.0      0      0   8.0500       1.0\n","..           ...       ...     ...  ...   ...    ...    ...      ...       ...\n","886          887         0       2    0  27.0      0      0  13.0000       1.0\n","887          888         1       1    1  19.0      0      0  30.0000       1.0\n","888          889         0       3    1   NaN      1      2  23.4500       1.0\n","889          890         1       1    0  26.0      0      0  30.0000       0.0\n","890          891         0       3    0  32.0      0      0   7.7500       2.0\n","\n","[891 rows x 9 columns]\n"]}],"source":["# Convert 'sex' & 'embarked' column to numeric values using map\n","df['Sex'] = df['Sex'].map({'male': 0, 'female': 1})\n","df['Embarked'] = df['Embarked'].map({'C': 0, 'S': 1,'Q': 2 })\n","print(df)"]},{"cell_type":"markdown","source":["**Missing value handling technique - 1 : Applying Mean, Mode, Median**"],"metadata":{"id":"oNMJjm8ekinz"}},{"cell_type":"markdown","metadata":{"id":"GgDNtoWnGJ0r"},"source":["Using Mean"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3259,"status":"ok","timestamp":1716645587053,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"},"user_tz":-360},"id":"NpcYbJ39EkuL","outputId":"758694f3-b71f-4d98-86e8-1306d3d6fc4c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Decision Tree Accuracy: 0.75\n","Random Forest Accuracy: 0.82\n","SVM Accuracy: 0.62\n","KNN Accuracy: 0.65\n","Logistic Regression Accuracy: 0.80\n","Naive Bayes Accuracy: 0.79\n","HistGradientBoostingClassifier Accuracy: 0.80\n"]}],"source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.svm import SVC\n","from sklearn.naive_bayes import GaussianNB\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.impute import SimpleImputer\n","from sklearn.metrics import accuracy_score\n","from sklearn.ensemble import HistGradientBoostingClassifier\n","\n","# Select features and target\n","features = ['PassengerId', 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']\n","X = df[features]\n","y = df['Survived']\n","\n","\n","# Handle missing values\n","imputer = SimpleImputer(strategy='mean')\n","X = imputer.fit_transform(X)\n","\n","# Split the dataset\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)\n","\n","# Train a Decision Tree\n","dt = DecisionTreeClassifier(random_state=42)\n","dt.fit(X_train, y_train)\n","dt_predictions = dt.predict(X_test)\n","dt_accuracy = accuracy_score(y_test, dt_predictions)\n","print(f\"Decision Tree Accuracy: {dt_accuracy:.2f}\")\n","\n","# Train a Random Forest\n","rf = RandomForestClassifier(random_state=42)\n","rf.fit(X_train, y_train)\n","rf_predictions = rf.predict(X_test)\n","rf_accuracy = accuracy_score(y_test, rf_predictions)\n","print(f\"Random Forest Accuracy: {rf_accuracy:.2f}\")\n","\n","# Train an SVM classifier\n","svm = SVC(random_state=42)\n","svm.fit(X_train, y_train)\n","svm_predictions = svm.predict(X_test)\n","svm_accuracy = accuracy_score(y_test, svm_predictions)\n","print(f\"SVM Accuracy: {svm_accuracy:.2f}\")\n","\n","# Train a KNN classifier\n","knn = KNeighborsClassifier()\n","knn.fit(X_train, y_train)\n","knn_predictions = knn.predict(X_test)\n","knn_accuracy = accuracy_score(y_test, knn_predictions)\n","print(f\"KNN Accuracy: {knn_accuracy:.2f}\")\n","\n","# Train a logistic regression model\n","log_reg = LogisticRegression(max_iter=1100, random_state=42)\n","log_reg.fit(X_train, y_train)\n","y_pred = log_reg.predict(X_test)\n","accuracy = accuracy_score(y_test, y_pred)\n","print(f\"Logistic Regression Accuracy: {accuracy:.2f}\")\n","\n","# Train the Naive Bayes model\n","nb_model = GaussianNB()\n","nb_model.fit(X_train, y_train)\n","y_pred_nb = nb_model.predict(X_test)\n","accuracy_nb = accuracy_score(y_test, y_pred_nb)\n","print(f\"Naive Bayes Accuracy: {accuracy_nb:.2f}\")\n","\n","# Train the HistGradientBoostingClassifier model\n","hgb_model = HistGradientBoostingClassifier(random_state=42)\n","hgb_model.fit(X_train, y_train)\n","y_pred_hgb = hgb_model.predict(X_test)\n","accuracy_hgb = accuracy_score(y_test, y_pred_hgb)\n","print(f\"HistGradientBoostingClassifier Accuracy: {accuracy_hgb:.2f}\")\n"]},{"cell_type":"markdown","metadata":{"id":"IHXrDFZGGNwg"},"source":["Using Median"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2158,"status":"ok","timestamp":1716647011831,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"},"user_tz":-360},"id":"cI3PZVgCGHh6","outputId":"f65e18ab-2658-4e27-c152-487e9b7ad956"},"outputs":[{"output_type":"stream","name":"stdout","text":["Decision Tree Accuracy: 0.75\n","Random Forest Accuracy: 0.83\n","SVM Accuracy: 0.62\n","KNN Accuracy: 0.64\n","Logistic Regression Accuracy: 0.80\n","Naive Bayes Accuracy: 0.79\n","HistGradientBoostingClassifier Accuracy: 0.81\n"]}],"source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.svm import SVC\n","from sklearn.naive_bayes import GaussianNB\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.impute import SimpleImputer\n","from sklearn.metrics import accuracy_score\n","from sklearn.ensemble import HistGradientBoostingClassifier\n","\n","# Select features and target\n","features = ['PassengerId', 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']\n","X = df[features]\n","y = df['Survived']\n","\n","# Handle missing values\n","imputer = SimpleImputer(strategy='median')\n","X = imputer.fit_transform(X)\n","\n","# Split the dataset\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)\n","\n","# Train a Decision Tree\n","dt = DecisionTreeClassifier(random_state=42)\n","dt.fit(X_train, y_train)\n","dt_predictions = dt.predict(X_test)\n","dt_accuracy = accuracy_score(y_test, dt_predictions)\n","print(f\"Decision Tree Accuracy: {dt_accuracy:.2f}\")\n","\n","# Train a Random Forest\n","rf = RandomForestClassifier(random_state=42)\n","rf.fit(X_train, y_train)\n","rf_predictions = rf.predict(X_test)\n","rf_accuracy = accuracy_score(y_test, rf_predictions)\n","print(f\"Random Forest Accuracy: {rf_accuracy:.2f}\")\n","\n","# Train an SVM classifier\n","svm = SVC(random_state=42)\n","svm.fit(X_train, y_train)\n","svm_predictions = svm.predict(X_test)\n","svm_accuracy = accuracy_score(y_test, svm_predictions)\n","print(f\"SVM Accuracy: {svm_accuracy:.2f}\")\n","\n","# Train a KNN classifier\n","knn = KNeighborsClassifier()\n","knn.fit(X_train, y_train)\n","knn_predictions = knn.predict(X_test)\n","knn_accuracy = accuracy_score(y_test, knn_predictions)\n","print(f\"KNN Accuracy: {knn_accuracy:.2f}\")\n","\n","# Train a logistic regression model\n","log_reg = LogisticRegression(max_iter=1100, random_state=42)\n","log_reg.fit(X_train, y_train)\n","y_pred = log_reg.predict(X_test)\n","accuracy = accuracy_score(y_test, y_pred)\n","print(f\"Logistic Regression Accuracy: {accuracy:.2f}\")\n","\n","# Train the Naive Bayes model\n","nb_model = GaussianNB()\n","nb_model.fit(X_train, y_train)\n","y_pred_nb = nb_model.predict(X_test)\n","accuracy_nb = accuracy_score(y_test, y_pred_nb)\n","print(f\"Naive Bayes Accuracy: {accuracy_nb:.2f}\")\n","\n","# Train the HistGradientBoostingClassifier model\n","hgb_model = HistGradientBoostingClassifier(random_state=42)\n","hgb_model.fit(X_train, y_train)\n","y_pred_hgb = hgb_model.predict(X_test)\n","accuracy_hgb = accuracy_score(y_test, y_pred_hgb)\n","print(f\"HistGradientBoostingClassifier Accuracy: {accuracy_hgb:.2f}\")"]},{"cell_type":"markdown","metadata":{"id":"sS8LXr4UGPiu"},"source":["Using Mode"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"N_FRaoYxGIaE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716647296882,"user_tz":-360,"elapsed":987,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"}},"outputId":"1be89dde-c1ae-4b84-84c4-116fb4f77c6d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Decision Tree Accuracy: 0.75\n","Random Forest Accuracy: 0.82\n","SVM Accuracy: 0.62\n","KNN Accuracy: 0.65\n","Logistic Regression Accuracy: 0.80\n","Naive Bayes Accuracy: 0.79\n","HistGradientBoostingClassifier Accuracy: 0.80\n"]}],"source":["# Handle missing values\n","imputer = SimpleImputer(strategy='most_frequent')\n","X = imputer.fit_transform(X)\n","\n","# Split the dataset\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)\n","\n","# Train a Decision Tree\n","dt = DecisionTreeClassifier(random_state=42)\n","dt.fit(X_train, y_train)\n","dt_predictions = dt.predict(X_test)\n","dt_accuracy = accuracy_score(y_test, dt_predictions)\n","print(f\"Decision Tree Accuracy: {dt_accuracy:.2f}\")\n","\n","# Train a Random Forest\n","rf = RandomForestClassifier(random_state=42)\n","rf.fit(X_train, y_train)\n","rf_predictions = rf.predict(X_test)\n","rf_accuracy = accuracy_score(y_test, rf_predictions)\n","print(f\"Random Forest Accuracy: {rf_accuracy:.2f}\")\n","\n","# Train an SVM classifier\n","svm = SVC(random_state=42)\n","svm.fit(X_train, y_train)\n","svm_predictions = svm.predict(X_test)\n","svm_accuracy = accuracy_score(y_test, svm_predictions)\n","print(f\"SVM Accuracy: {svm_accuracy:.2f}\")\n","\n","# Train a KNN classifier\n","knn = KNeighborsClassifier()\n","knn.fit(X_train, y_train)\n","knn_predictions = knn.predict(X_test)\n","knn_accuracy = accuracy_score(y_test, knn_predictions)\n","print(f\"KNN Accuracy: {knn_accuracy:.2f}\")\n","\n","# Train a logistic regression model\n","log_reg = LogisticRegression(max_iter=1100, random_state=42)\n","log_reg.fit(X_train, y_train)\n","y_pred = log_reg.predict(X_test)\n","accuracy = accuracy_score(y_test, y_pred)\n","print(f\"Logistic Regression Accuracy: {accuracy:.2f}\")\n","\n","# Train the Naive Bayes model\n","nb_model = GaussianNB()\n","nb_model.fit(X_train, y_train)\n","y_pred_nb = nb_model.predict(X_test)\n","accuracy_nb = accuracy_score(y_test, y_pred_nb)\n","print(f\"Naive Bayes Accuracy: {accuracy_nb:.2f}\")\n","\n","# Train the HistGradientBoostingClassifier model\n","hgb_model = HistGradientBoostingClassifier(random_state=42)\n","hgb_model.fit(X_train, y_train)\n","y_pred_hgb = hgb_model.predict(X_test)\n","accuracy_hgb = accuracy_score(y_test, y_pred_hgb)\n","print(f\"HistGradientBoostingClassifier Accuracy: {accuracy_hgb:.2f}\")"]},{"cell_type":"code","source":[],"metadata":{"id":"ti6fMr_Nhz9O"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Missing value handling technique - 2: Fill the Null value with next value**"],"metadata":{"id":"S0T6tGkyh0mM"}},{"cell_type":"code","source":["import pandas as pd\n","\n","# URL of the Titanic dataset\n","url = \"https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv\"\n","\n","# Reading the dataset into a pandas DataFrame\n","df = pd.read_csv(url)\n"],"metadata":{"id":"9P1P4lzsh2AJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Convert 'sex' & 'embarked' column to numeric values using map\n","df['Sex'] = df['Sex'].map({'male': 0, 'female': 1})\n","df['Embarked'] = df['Embarked'].map({'C': 0, 'S': 1,'Q': 2 })\n","\n","df.drop(columns=['Name','Ticket', 'Cabin'], inplace=True)\n","print(df)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XJmXUve2iHEg","executionInfo":{"status":"ok","timestamp":1716487760136,"user_tz":-360,"elapsed":14,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"}},"outputId":"7e30b9a5-e8a1-4009-b064-0424bbbeb793"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["     PassengerId  Survived  Pclass  Sex   Age  SibSp  Parch     Fare  Embarked\n","0              1         0       3    0  22.0      1      0   7.2500       1.0\n","1              2         1       1    1  38.0      1      0  71.2833       0.0\n","2              3         1       3    1  26.0      0      0   7.9250       1.0\n","3              4         1       1    1  35.0      1      0  53.1000       1.0\n","4              5         0       3    0  35.0      0      0   8.0500       1.0\n","..           ...       ...     ...  ...   ...    ...    ...      ...       ...\n","886          887         0       2    0  27.0      0      0  13.0000       1.0\n","887          888         1       1    1  19.0      0      0  30.0000       1.0\n","888          889         0       3    1   NaN      1      2  23.4500       1.0\n","889          890         1       1    0  26.0      0      0  30.0000       0.0\n","890          891         0       3    0  32.0      0      0   7.7500       2.0\n","\n","[891 rows x 9 columns]\n"]}]},{"cell_type":"code","source":["df1= df.fillna(method = 'pad')\n","df1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"A78fvEWqiHHK","executionInfo":{"status":"ok","timestamp":1716487760136,"user_tz":-360,"elapsed":13,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"}},"outputId":"c68d64c7-bc17-4926-9176-526a11ed9f3e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     PassengerId  Survived  Pclass  Sex   Age  SibSp  Parch     Fare  Embarked\n","0              1         0       3    0  22.0      1      0   7.2500       1.0\n","1              2         1       1    1  38.0      1      0  71.2833       0.0\n","2              3         1       3    1  26.0      0      0   7.9250       1.0\n","3              4         1       1    1  35.0      1      0  53.1000       1.0\n","4              5         0       3    0  35.0      0      0   8.0500       1.0\n","..           ...       ...     ...  ...   ...    ...    ...      ...       ...\n","886          887         0       2    0  27.0      0      0  13.0000       1.0\n","887          888         1       1    1  19.0      0      0  30.0000       1.0\n","888          889         0       3    1  19.0      1      2  23.4500       1.0\n","889          890         1       1    0  26.0      0      0  30.0000       0.0\n","890          891         0       3    0  32.0      0      0   7.7500       2.0\n","\n","[891 rows x 9 columns]"],"text/html":["\n","  <div id=\"df-7ba99fd0-52b4-4dcc-a344-017ad0e11d03\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>886</th>\n","      <td>887</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>27.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>13.0000</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>887</th>\n","      <td>888</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>19.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>30.0000</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>888</th>\n","      <td>889</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>19.0</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>23.4500</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>889</th>\n","      <td>890</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>30.0000</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>890</th>\n","      <td>891</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>32.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.7500</td>\n","      <td>2.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>891 rows × 9 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7ba99fd0-52b4-4dcc-a344-017ad0e11d03')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-7ba99fd0-52b4-4dcc-a344-017ad0e11d03 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-7ba99fd0-52b4-4dcc-a344-017ad0e11d03');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6303343b-f97b-4ba7-b58d-e7e8863771a2\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6303343b-f97b-4ba7-b58d-e7e8863771a2')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6303343b-f97b-4ba7-b58d-e7e8863771a2 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_4728b0d1-32f7-4005-bd51-e0d393d8ed63\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df1')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_4728b0d1-32f7-4005-bd51-e0d393d8ed63 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df1');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df1","summary":"{\n  \"name\": \"df1\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 257,\n        \"min\": 1,\n        \"max\": 891,\n        \"num_unique_values\": 891,\n        \"samples\": [\n          710,\n          440,\n          841\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.554589813600968,\n        \"min\": 0.42,\n        \"max\": 80.0,\n        \"num_unique_values\": 88,\n        \"samples\": [\n          0.75,\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.6934285971809,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          11.2417,\n          51.8625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5168029946218669,\n        \"min\": 0.0,\n        \"max\": 2.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":78}]},{"cell_type":"code","source":["df1['Survived'].unique()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dEDSFQ6SmSW1","executionInfo":{"status":"ok","timestamp":1716487760136,"user_tz":-360,"elapsed":12,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"}},"outputId":"dc730106-a749-48d3-cc32-763f78bf9e3b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 1])"]},"metadata":{},"execution_count":79}]},{"cell_type":"code","source":["# Check for missing values\n","print(df1.isnull().sum())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QJC7XwE6iHJ4","executionInfo":{"status":"ok","timestamp":1716487760136,"user_tz":-360,"elapsed":8,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"}},"outputId":"5dc41f63-0e7d-4fb1-b0ba-4c28c3855885"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["PassengerId    0\n","Survived       0\n","Pclass         0\n","Sex            0\n","Age            0\n","SibSp          0\n","Parch          0\n","Fare           0\n","Embarked       0\n","dtype: int64\n"]}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","\n","X = df1.drop('Survived', axis=1)\n","y = df1['Survived']\n","y = [int(label) for label in y]\n","# Split the data into 60% train and 40% test\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)"],"metadata":{"id":"obD2De5AiHMe"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Train a Decision Tree\n","dt = DecisionTreeClassifier(random_state=42)\n","dt.fit(X_train, y_train)\n","dt_predictions = dt.predict(X_test)\n","dt_accuracy = accuracy_score(y_test, dt_predictions)\n","print(f\"Decision Tree Accuracy: {dt_accuracy:.2f}\")\n","\n","# Train a Random Forest\n","rf = RandomForestClassifier(random_state=42)\n","rf.fit(X_train, y_train)\n","rf_predictions = rf.predict(X_test)\n","rf_accuracy = accuracy_score(y_test, rf_predictions)\n","print(f\"Random Forest Accuracy: {rf_accuracy:.2f}\")\n","\n","# Train an SVM classifier\n","svm = SVC(random_state=42)\n","svm.fit(X_train, y_train)\n","svm_predictions = svm.predict(X_test)\n","svm_accuracy = accuracy_score(y_test, svm_predictions)\n","print(f\"SVM Accuracy: {svm_accuracy:.2f}\")\n","\n","# Train a KNN classifier\n","knn = KNeighborsClassifier()\n","knn.fit(X_train, y_train)\n","knn_predictions = knn.predict(X_test)\n","knn_accuracy = accuracy_score(y_test, knn_predictions)\n","print(f\"KNN Accuracy: {knn_accuracy:.2f}\")\n","\n","# Train a logistic regression model\n","log_reg = LogisticRegression(max_iter=1100, random_state=42)\n","log_reg.fit(X_train, y_train)\n","y_pred = log_reg.predict(X_test)\n","accuracy = accuracy_score(y_test, y_pred)\n","print(f\"Logistic Regression Accuracy: {accuracy:.2f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xTKbPHuliHPN","executionInfo":{"status":"ok","timestamp":1716487760783,"user_tz":-360,"elapsed":653,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"}},"outputId":"0d05724e-da27-4972-8de5-dbbcf963564d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Decision Tree Accuracy: 0.73\n","Random Forest Accuracy: 0.82\n","SVM Accuracy: 0.62\n","KNN Accuracy: 0.68\n","Logistic Regression Accuracy: 0.78\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"yQ7IRLDyiHRu"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Missing value handling technique - 3:  Computing Correlation Matrix using pairwise deletion**"],"metadata":{"id":"fB_fn-63i_K3"}},{"cell_type":"code","source":["import pandas as pd\n","\n","# URL of the Titanic dataset\n","url = \"https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv\"\n","\n","# Reading the dataset into a pandas DataFrame\n","df = pd.read_csv(url)\n","\n","# Display the first few rows of the dataframe\n","print(df.head())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"n-AMPFLFjEvu","executionInfo":{"status":"ok","timestamp":1716487760783,"user_tz":-360,"elapsed":11,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"}},"outputId":"df4ba41c-d986-4b09-c6bc-699013b0e13c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["   PassengerId  Survived  Pclass  \\\n","0            1         0       3   \n","1            2         1       1   \n","2            3         1       3   \n","3            4         1       1   \n","4            5         0       3   \n","\n","                                                Name     Sex   Age  SibSp  \\\n","0                            Braund, Mr. Owen Harris    male  22.0      1   \n","1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n","2                             Heikkinen, Miss. Laina  female  26.0      0   \n","3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n","4                           Allen, Mr. William Henry    male  35.0      0   \n","\n","   Parch            Ticket     Fare Cabin Embarked  \n","0      0         A/5 21171   7.2500   NaN        S  \n","1      0          PC 17599  71.2833   C85        C  \n","2      0  STON/O2. 3101282   7.9250   NaN        S  \n","3      0            113803  53.1000  C123        S  \n","4      0            373450   8.0500   NaN        S  \n"]}]},{"cell_type":"code","source":["# Convert 'sex' & 'embarked' column to numeric values using map\n","df['Sex'] = df['Sex'].map({'male': 0, 'female': 1})\n","df['Embarked'] = df['Embarked'].map({'C': 0, 'S': 1,'Q': 2 })\n","\n","df.drop(columns=['Name','Ticket', 'Cabin'], inplace=True)\n","print(df)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oYAHTAlgjE06","executionInfo":{"status":"ok","timestamp":1716487760783,"user_tz":-360,"elapsed":10,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"}},"outputId":"b7cb898c-d2a9-4fef-d806-561b8767b052"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["     PassengerId  Survived  Pclass  Sex   Age  SibSp  Parch     Fare  Embarked\n","0              1         0       3    0  22.0      1      0   7.2500       1.0\n","1              2         1       1    1  38.0      1      0  71.2833       0.0\n","2              3         1       3    1  26.0      0      0   7.9250       1.0\n","3              4         1       1    1  35.0      1      0  53.1000       1.0\n","4              5         0       3    0  35.0      0      0   8.0500       1.0\n","..           ...       ...     ...  ...   ...    ...    ...      ...       ...\n","886          887         0       2    0  27.0      0      0  13.0000       1.0\n","887          888         1       1    1  19.0      0      0  30.0000       1.0\n","888          889         0       3    1   NaN      1      2  23.4500       1.0\n","889          890         1       1    0  26.0      0      0  30.0000       0.0\n","890          891         0       3    0  32.0      0      0   7.7500       2.0\n","\n","[891 rows x 9 columns]\n"]}]},{"cell_type":"code","source":["# Compute correlation matrix using pairwise deletion\n","df3 = df.corr(method='pearson', min_periods=1)\n","print(\"\\nPairwise Deletion Correlation Matrix:\")\n","print(df3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NYJAtuCUjE3f","executionInfo":{"status":"ok","timestamp":1716487760783,"user_tz":-360,"elapsed":8,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"}},"outputId":"37dd8c89-c3bd-4643-8606-d30f348aa4bb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Pairwise Deletion Correlation Matrix:\n","             PassengerId  Survived    Pclass       Sex       Age     SibSp  \\\n","PassengerId     1.000000 -0.005007 -0.035144 -0.042939  0.036847 -0.057527   \n","Survived       -0.005007  1.000000 -0.338481  0.543351 -0.077221 -0.035322   \n","Pclass         -0.035144 -0.338481  1.000000 -0.131900 -0.369226  0.083081   \n","Sex            -0.042939  0.543351 -0.131900  1.000000 -0.093254  0.114631   \n","Age             0.036847 -0.077221 -0.369226 -0.093254  1.000000 -0.308247   \n","SibSp          -0.057527 -0.035322  0.083081  0.114631 -0.308247  1.000000   \n","Parch          -0.001652  0.081629  0.018443  0.245489 -0.189119  0.414838   \n","Fare            0.012658  0.257307 -0.549500  0.182333  0.096067  0.159651   \n","Embarked       -0.017487 -0.126753  0.307324 -0.023175 -0.042340  0.031095   \n","\n","                Parch      Fare  Embarked  \n","PassengerId -0.001652  0.012658 -0.017487  \n","Survived     0.081629  0.257307 -0.126753  \n","Pclass       0.018443 -0.549500  0.307324  \n","Sex          0.245489  0.182333 -0.023175  \n","Age         -0.189119  0.096067 -0.042340  \n","SibSp        0.414838  0.159651  0.031095  \n","Parch        1.000000  0.216225 -0.035756  \n","Fare         0.216225  1.000000 -0.269588  \n","Embarked    -0.035756 -0.269588  1.000000  \n"]}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","# Define the features and the target\n","X = df3.drop('Survived', axis=1)\n","y = df3['Survived']\n","y = [int(label) for label in y]\n","# Split the data into 60% train and 40% test\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)"],"metadata":{"id":"O8a-sv_wjE60"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Train a Decision Tree\n","dt = DecisionTreeClassifier(random_state=42)\n","dt.fit(X_train, y_train)\n","dt_predictions = dt.predict(X_test)\n","dt_accuracy = accuracy_score(y_test, dt_predictions)\n","print(f\"Decision Tree Accuracy: {dt_accuracy:.2f}\")\n","\n","# Train a Random Forest\n","rf = RandomForestClassifier(random_state=42)\n","rf.fit(X_train, y_train)\n","rf_predictions = rf.predict(X_test)\n","rf_accuracy = accuracy_score(y_test, rf_predictions)\n","print(f\"Random Forest Accuracy: {rf_accuracy:.2f}\")\n","\n","# Train a KNN classifier\n","knn = KNeighborsClassifier()\n","knn.fit(X_train, y_train)\n","knn_predictions = knn.predict(X_test)\n","knn_accuracy = accuracy_score(y_test, knn_predictions)\n","print(f\"KNN Accuracy: {knn_accuracy:.2f}\")\n","\n","# Train the Naive Bayes model\n","nb_model = GaussianNB()\n","nb_model.fit(X_train, y_train)\n","y_pred_nb = nb_model.predict(X_test)\n","accuracy_nb = accuracy_score(y_test, y_pred_nb)\n","print(f\"Naive Bayes Accuracy: {accuracy_nb:.2f}\")\n","\n","# Train the HistGradientBoostingClassifier model\n","hgb_model = HistGradientBoostingClassifier(random_state=42)\n","hgb_model.fit(X_train, y_train)\n","y_pred_hgb = hgb_model.predict(X_test)\n","accuracy_hgb = accuracy_score(y_test, y_pred_hgb)\n","print(f\"HistGradientBoostingClassifier Accuracy: {accuracy_hgb:.2f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bL5lQSlZjQbi","executionInfo":{"status":"ok","timestamp":1716487761599,"user_tz":-360,"elapsed":820,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"}},"outputId":"f8e8bbb4-b165-4b91-d129-f8479a548107"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Decision Tree Accuracy: 0.75\n","Random Forest Accuracy: 0.75\n","KNN Accuracy: 0.75\n","Naive Bayes Accuracy: 0.75\n","HistGradientBoostingClassifier Accuracy: 0.75\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"_wU-bUpajQed"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**HistGradientBoostingClassifier without preprocessing**"],"metadata":{"id":"u-bZrZNKZb3c"}},{"cell_type":"code","source":["from sklearn.ensemble import HistGradientBoostingClassifier\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score\n","from sklearn.metrics import accuracy_score\n","\n","# Select features and target\n","features = ['PassengerId', 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']\n","\n","X = df[features]\n","y = df['Survived']\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)\n","\n","# Train the HistGradientBoostingClassifier model\n","hgb_model = HistGradientBoostingClassifier(random_state=42)\n","hgb_model.fit(X_train, y_train)\n","y_pred_hgb = hgb_model.predict(X_test)\n","accuracy_hgb = accuracy_score(y_test, y_pred_hgb)\n","print(f\"HistGradientBoostingClassifier Accuracy: {accuracy_hgb:.2f}\")\n","\n","# Calculate precision, recall, and F1 score\n","from sklearn.metrics import precision_score, recall_score, f1_score\n","\n","precision = precision_score(y_test,y_pred_hgb)\n","recall = recall_score(y_test, y_pred_hgb)\n","f1 = f1_score(y_test, y_pred_hgb)\n","print(f'Precision: {precision:.2f}')\n","print(f'Recall: {recall:.2f}')\n","print(f'F1 Score: {f1:.2f}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ShRvy9oSaZk3","executionInfo":{"status":"ok","timestamp":1716652812075,"user_tz":-360,"elapsed":4330,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"}},"outputId":"6304cf82-b0d7-4ad7-96c5-19845db2d816"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["HistGradientBoostingClassifier Accuracy: 0.80\n","Precision: 0.77\n","Recall: 0.68\n","F1 Score: 0.72\n"]}]},{"cell_type":"markdown","source":["****"],"metadata":{"id":"qbxBnaZQZYI8"}},{"cell_type":"markdown","metadata":{"id":"wEhzBjY2Cmt-"},"source":["**Frequent pattern mining applying on Random forest**\n"]},{"cell_type":"code","source":["import pandas as pd\n","\n","# URL of the Titanic dataset\n","url = \"https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv\"\n","\n","# Reading the dataset into a pandas DataFrame\n","data = pd.read_csv(url)\n","\n","# Display the first few rows of the dataframe\n","print(data.head())\n"],"metadata":{"id":"fowzrm2lb2qs","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716654064848,"user_tz":-360,"elapsed":446,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"}},"outputId":"44a9f66a-f0eb-4a0a-8d83-d64b0b021b79"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["   PassengerId  Survived  Pclass  \\\n","0            1         0       3   \n","1            2         1       1   \n","2            3         1       3   \n","3            4         1       1   \n","4            5         0       3   \n","\n","                                                Name     Sex   Age  SibSp  \\\n","0                            Braund, Mr. Owen Harris    male  22.0      1   \n","1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n","2                             Heikkinen, Miss. Laina  female  26.0      0   \n","3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n","4                           Allen, Mr. William Henry    male  35.0      0   \n","\n","   Parch            Ticket     Fare Cabin Embarked  \n","0      0         A/5 21171   7.2500   NaN        S  \n","1      0          PC 17599  71.2833   C85        C  \n","2      0  STON/O2. 3101282   7.9250   NaN        S  \n","3      0            113803  53.1000  C123        S  \n","4      0            373450   8.0500   NaN        S  \n"]}]},{"cell_type":"code","source":["\n","data['Age'].fillna(data['Age'].median(), inplace=True)\n","data['Embarked'].fillna(data['Embarked'].mode()[0], inplace=True)\n","\n","data.drop(columns=['Cabin', 'Ticket', 'Name'], inplace=True)\n","\n","# Convert categorical features to numerical\n","data = pd.get_dummies(data, columns=['Sex', 'Embarked'], drop_first=True)\n"],"metadata":{"id":"bE-T446QLO26"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Transform the dataset into a format suitable for apriori\n","# Convert numerical values to categorical (discretization)\n","data['Age'] = pd.cut(data['Age'], bins=[0, 12, 18, 35, 60, 120], labels=['Child', 'Teen', 'Adult', 'Middle-Aged', 'Senior'])\n","data['Fare'] = pd.cut(data['Fare'], bins=[0, 7.91, 14.454, 31, 513], labels=['Low', 'Mid', 'High', 'Very High'])\n","\n","# One-hot encoding\n","df = pd.get_dummies(data[['Sex_male', 'Embarked_Q', 'Embarked_S']], drop_first=True)\n"],"metadata":{"id":"BwVStBz6DKqf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pip install mlxtend"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AMQChO68MhlM","executionInfo":{"status":"ok","timestamp":1716631260481,"user_tz":-360,"elapsed":10603,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"}},"outputId":"9e0df587-5650-4fa5-a6db-1632866c17fd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: mlxtend in /usr/local/lib/python3.10/dist-packages (0.22.0)\n","Requirement already satisfied: scipy>=1.2.1 in /usr/local/lib/python3.10/dist-packages (from mlxtend) (1.11.4)\n","Requirement already satisfied: numpy>=1.16.2 in /usr/local/lib/python3.10/dist-packages (from mlxtend) (1.25.2)\n","Requirement already satisfied: pandas>=0.24.2 in /usr/local/lib/python3.10/dist-packages (from mlxtend) (2.0.3)\n","Requirement already satisfied: scikit-learn>=1.0.2 in /usr/local/lib/python3.10/dist-packages (from mlxtend) (1.2.2)\n","Requirement already satisfied: matplotlib>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from mlxtend) (3.7.1)\n","Requirement already satisfied: joblib>=0.13.2 in /usr/local/lib/python3.10/dist-packages (from mlxtend) (1.4.2)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from mlxtend) (67.7.2)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.0.0->mlxtend) (1.2.1)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.0.0->mlxtend) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.0.0->mlxtend) (4.51.0)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.0.0->mlxtend) (1.4.5)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.0.0->mlxtend) (24.0)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.0.0->mlxtend) (9.4.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.0.0->mlxtend) (3.1.2)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.0.0->mlxtend) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24.2->mlxtend) (2023.4)\n","Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24.2->mlxtend) (2024.1)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=1.0.2->mlxtend) (3.5.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib>=3.0.0->mlxtend) (1.16.0)\n"]}]},{"cell_type":"code","source":["from mlxtend.frequent_patterns import apriori, association_rules\n","frequent_itemsets = apriori(df, min_support=0.1, use_colnames=True)\n","rules = association_rules(frequent_itemsets, metric=\"confidence\", min_threshold=0.6)\n","\n","print(rules.head())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ro6kQbSuF62U","executionInfo":{"status":"ok","timestamp":1716631263309,"user_tz":-360,"elapsed":2,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"}},"outputId":"c8e88a4f-e1a5-443d-fccd-ac758ed38f3a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["    antecedents   consequents  antecedent support  consequent support  \\\n","0    (Sex_male)  (Embarked_S)            0.647587            0.725028   \n","1  (Embarked_S)    (Sex_male)            0.725028            0.647587   \n","2    (Survived)  (Embarked_S)            0.383838            0.725028   \n","\n","    support  confidence      lift  leverage  conviction  zhangs_metric  \n","0  0.494949    0.764298  1.054163  0.025431    1.166609       0.145796  \n","1  0.494949    0.682663  1.054163  0.025431    1.110531       0.186857  \n","2  0.245791    0.640351  0.883208 -0.032502    0.764556      -0.176692  \n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n","/usr/local/lib/python3.10/dist-packages/mlxtend/frequent_patterns/fpcommon.py:110: DeprecationWarning: DataFrames with non-bool types result in worse computationalperformance and their support might be discontinued in the future.Please use a DataFrame with bool type\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["# Create a feature for whether a passenger survived based on frequent patterns\n","df['Survived'] = data['Survived']\n","\n","# Select frequent itemsets that have high confidence in predicting survival\n","survival_rules = rules[rules['consequents'] == {'Survived'}]\n","\n","# Use these rules to create new features\n","for _, rule in survival_rules.iterrows():\n","    antecedents = list(rule['antecedents'])\n","    df[f\"Rule_{rule['antecedents']}\"] = df[antecedents].all(axis=1).astype(int)\n","\n","# Drop original features used for rules\n","#df.drop(columns=antecedents, inplace=True)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y5myvnfXDQtM","executionInfo":{"status":"ok","timestamp":1716631442724,"user_tz":-360,"elapsed":494,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"}},"outputId":"d62f1a3e-0438-47e9-ba3a-1eea84b9015e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import accuracy_score\n","\n","# Split the data into train and test sets\n","X = df.drop(columns='Survived')\n","y = df['Survived']\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)\n","\n","# Train a Random Forest Classifier\n","clf = RandomForestClassifier(n_estimators=100, random_state=42)\n","clf.fit(X_train, y_train)\n","\n","# Predict and evaluate\n","y_pred = clf.predict(X_test)\n","print(f\"Accuracy: {accuracy_score(y_test, y_pred)}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VY46NDTuIlP4","executionInfo":{"status":"ok","timestamp":1716631476960,"user_tz":-360,"elapsed":645,"user":{"displayName":"Mujahidul Islam '\\0';","userId":"14759988644963952024"}},"outputId":"0473ef87-0d78-43b8-dc82-d42748ef1909"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"stream","name":"stdout","text":["Accuracy: 0.773109243697479\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"dQVf8FXvNVku"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Draft Code**"],"metadata":{"id":"mtWPm3EyDRdI"}},{"cell_type":"code","source":["# Calculate precision, recall, and F1 score\n","from sklearn.metrics import precision_score, recall_score, f1_score\n","\n","precision = precision_score(y_test, y_pred)\n","recall = recall_score(y_test, y_pred)\n","f1 = f1_score(y_test, y_pred)\n","print(f'Precision: {precision:.2f}')\n","print(f'Recall: {recall:.2f}')\n","print(f'F1 Score: {f1:.2f}')"],"metadata":{"id":"Pc9pn37GDUT2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"78xpE1z3DUos"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPMsYRTc+3E7unVMK3ZnbsP"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}